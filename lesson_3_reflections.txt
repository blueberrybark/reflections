When would you want to use a remote repository rather
than keeping all your work local?

If you plan on using multiple computers to work on a
project or if you will have multiple people working
on the same project.


Why might you want to always pull changes manually
rather than having Git automatially stay-up-to-date
with your remote repository?

If you're in the middle of adding changes to a project
the addition of someone elses changes might negatively
impact your work.


Describe the differences between forks, clones, and
branches. When would you use one instead of another?

Forks are copies of another persons remote that link
back to the original remote, but allow the user to
make changes to their own version of the master
without affecting the original remote. Clones are just
complete copies of repositories, and can be used to
push and pull changes to and from a remote. Branches
are different parts of one repository that allow you
to create alternate versions of the code to test new
features or fix bugs without affecting the main code.


What is the benefit of having a copy of the last known
state of the remote storred locally?

Having a copy of the last known state of the remote
stored locally allows you to merge the files whenever
you want, even if you're offline.


How would you collaborate without using Git or Github?
What would be easier, and what would be harder?

Without Github, or a version-control system like Github,
you would manually have to send files back and forth
between collaboraters, and keep track of which changes
have been made between different versions of files
manually. You would also need to keep a manual record
of what changes each contributor had made. If Git or
Github aren't used, you wouldn't have to know the
specific Git commands and terminology, or go through
as many steps to send code back and forth.


When would you want to make changes in a seperate branch
rather than directly in master? What benefits does each
approach have?

You would want to make changes in a seperate branch if
you're working on something that is experimental or
could prevent the code from running while you fix a bug.
Changing master directly is quicker and easier, but
changing a branch first gives you more control over
the timing of additions to the code in the master branch.